using System;
using System.Collections;
using System.Collections.Generic;

namespace AdoNetCore.AseClient
{
    /// <summary>
    /// Collects all errors generated by Adaptive Server ADO.NET Data Provider.
    /// </summary>
    public sealed class AseErrorCollection : ICollection
    {
        private readonly object _syncRoot = new object();
        private readonly AseError[] _errors;
        internal AseError MainError => _errors.Length > 0 ? _errors[0] : null;

        internal AseErrorCollection(params AseError[] errors)
        {
            _errors = new AseError[errors?.Length ?? 0];
            var idx = 0;
            foreach (var error in ArrangeErrors(errors))
            {
                _errors[idx] = error;
                idx++;
            }
        }

        /// <summary>
        /// The number of errors in the collection.
        /// </summary>
        public int Count => _errors.Length;

        public bool IsSynchronized => true;

        public object SyncRoot => _syncRoot;

        /// <summary>
        /// Copies the elements of the AseErrorCollection into an array, starting at the given index within the array.
        /// </summary>
        /// <param name="array">The array into which to copy the elements.</param>
        /// <param name="index">The starting index of the array.</param>
        public void CopyTo(Array array, int index)
        {
            Array.Copy(_errors, 0, array, index, _errors.Length);
        }

        /// <summary>
        /// Enumerates the errors in this collection.
        /// </summary>
        public IEnumerator GetEnumerator()
        {
            return _errors.GetEnumerator();
        }

        /// <summary>
        /// The error at the specified index.
        /// </summary>
        public AseError this[int index] => _errors[index];

        private static int GetIndexOfMostSevereError(AseError[] errors)
        {
            if (errors.Length == 0) { return -1; }
            if (errors.Length == 1) { return 0; }

            var result = 0;
            for (var i = 1; i < errors.Length; i++)
            {
                // We will respect the order if they're the same and already sorted and only care for the different ones
                if (errors[result].Severity < errors[i].Severity)
                {
                    result = i;
                }
            }
            return result;
        }

        /// <summary>
        /// Return the most severe error first, and then everything else in original order
        /// </summary>
        private static IEnumerable<AseError> ArrangeErrors(AseError[] errors)
        {
            if (errors == null || errors.Length == 0)
            {
                yield break;
            }

            var idxMostSevere = GetIndexOfMostSevereError(errors);

            if (idxMostSevere >= 0)
            {
                yield return errors[idxMostSevere];
            }

            for (var idxError = 0; idxError < errors.Length; idxError++)
            {
                if (idxError != idxMostSevere)
                {
                    yield return errors[idxError];
                }
            }
        }
    }
}
